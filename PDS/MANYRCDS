* ----------------------------------------------------------------- *
*       MANYRCDS   -   PUT OUT MANY NUMBERED OUTPUT RECORDS         *
*                      12 BYTE LRECL FOR NOW.                       *
* ----------------------------------------------------------------- *
*                                                                   *
*   Function  : To produce many sequentially numbered records       *
*               for testing the CKIEBGEN program and other copy     *
*               programs.                                           *
*                                                                   *
*   Author    : This program is in the public domain.               *
*                 (Written  by Sam Golob)                           *
*                                                                   *
*   JCL to run:                                                     *
*                                                                   *
*       //CKIEBGE1 EXEC PGM=MANYRCDS                                *
*       //STEPLIB   DD DISP=SHR,DSN=your.loadlib                    *
*       //SYSUT2    DD DISP=SHR,DSN=userid.manyrcds  (LRECL=12)     *
*       //SYSPRINT  DD SYSOUT=*                                     *
*       //SYSUDUMP  DD SYSOUT=*                                     *
*       //SYSIN     DD *                                            *
*       MAKE=100000                                                 *
*                                                                   *
*   Output format:                                                  *
*                                                                   *
*       1       10                                                  *
*       +---+----+--                                                *
*       000000000001                                                *
*       000000000002                                                *
*       000000000003                                                *
*       000000000004                                                *
*       000000000005                                                *
*       000000000006                                                *
*       000000000007                                                *
*       000000000008                                                *
*       000000000009                                                *
*       000000000010                                                *
*       000000000011                                                *
*       000000000012                                                *
*                                                                   *
* ----------------------------------------------------------------- *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R7,HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MANYRCDS CSECT
         YREGS
         USING *,R15
         B     EYECATCH
         DC    C'--- '            MAKE EYECATCHER VISIBLE
         DC    C'MANYRCDS - MAKE MANY SEQUENTIAL RECORDS - '
         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '
         DC    C'LEVEL 001 '
         DC    C'--- '            MAKE EYECATCHER VISIBLE
SAVEAREA DC    18F'0'
EYECATCH DS    0H             ENSURE ALIGNMENT
*        SAVE  (14,12)
         DS    0H
         STM   14,12,12(13)              Save Registers
         LR    R5,R1          SAVE PARM POINTER
         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR
         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR
         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR
         LR    R13,R1               NEW SAVE AREA ADDRESS
         DROP  R15
* -----                       SET UP ONE BASE REGISTER
         USING MANYRCDS,R12
         LR    R12,R15
         LR    R1,R5                  RESTORE PARM POINTER
         OPEN  (SYSUT2,(OUTPUT))
         OPEN  (SYSPRINT,OUTPUT)
         BAL   R7,DOSYSIN             Handle SYSIN cards
         ZAP   INRCDS,=P'0'           Initialize counters
         ZAP   OUTRCDS,=P'0'
         ZAP   PKCOPY,PACKSAVE        Save off the number of records
         MVC   OUTLINE,OUTLINE-1      Clear output area
         MVC   OUTLINE(133),MSG03     Bring skeleton of message
         MVC   OUTLINE+19(20),EDPAT2  Show how many records to make
         ED    OUTLINE+19(20),PKCOPY  And print the number out
         PUT   SYSPRINT,OUTLINE
LEER     DS    0H                     Create the output records
         CP    PKCOPY,INRCDS          Have we reached the limit?
         BNH   FIN                    Yes. Stop making records.
         AP    INRCDS,=P'1'           Count.
         MVC   OUTRECD(12),EDPAT1     Edit pattern with 'F0' fill
         ED    OUTRECD(12),INRCDS+2   Create the output record
         PUT   SYSUT2,OUTRECD         And PUT it out.
         AP    OUTRCDS,=P'1'          Count records PUT out.
         B     LEER                   And do the next record.
FIN      DS    0H                     Come here at end of process.
         CLOSE SYSUT2
PRINTIT  MVC   OUTLINE,OUTLINE-1      Print the results.
         MVC   OUTLINE(133),HEADER
         PUT   SYSPRINT,OUTLINE
         MVC   MSG01+19(20),EDPAT2
         ED    MSG01+19(20),INRCDS
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG01
         PUT   SYSPRINT,OUTLINE
         MVC   MSG02+19(20),EDPAT2
         ED    MSG02+19,OUTRCDS
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE(133),MSG02
         PUT   SYSPRINT,OUTLINE
         CLOSE SYSPRINT
THEEND   DS    0H                     Close the program.
         L     R13,4(,R13)
         RETURN (14,12),RC=0
* ------------------------------------------------------------------- *
DOSYSIN  DS    0H                        Process SYSIN records.
         ST    R7,SAVER7SY
         OPEN  (SYSIN,(INPUT))
         STM   R3,R4,SAVE34              Save the work registers.
         MVC   BLNKLINE,BLNKLINE-1       Clear blank line
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(65),=C'   Display SYSIN Cards and Conversions x
                (Later overrides Earlier)'
         PUT   SYSPRINT,OUTLINE
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+1(65),=C'   ------- ----- ----- --- ----------- x
                 ----- --------- ------- '
         PUT   SYSPRINT,OUTLINE
SYINLOOP DS    0H                        Read all the SYSIN cards.
         GET   SYSIN,INSYSIN             GET a card.
         NI    NUMCFLG,X'FF'-X'07'       Assume number on card is valid
         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.
         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.
* ------------------------------------------------------------------ *
*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *
* ------------------------------------------------------------------ *
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.
         MVC   OUTLINE+39(21),=C'<--- (Value as coded)'
         PUT   SYSPRINT,OUTLINE
* ------------------------------------------------------------------ *
*           Test the uppercased card for keywords                    *
*           And afterwards do the proper displacements               *
* ------------------------------------------------------------------ *
         LA    R3,WRKSYSIN               Point R3 to the uppercased.
         LA    R4,INSYSIN                Point R4 to the original.
         CLC   =C'MAKE= ',0(R3)           MAKE= followed by space?
         BE    SYINLOOP                   No number there, so ignore.
         CLC   =C'MAKE=',0(R3)            MAKE= keyword?
         BE    HCOPY                      Yes. Handle it.
         B     SYINLOOP
HCOPY    DS    0H                         Handle MAKE=
         OI    SKIPFLG,X'02'              Indicate its presence.
         LA    R4,5(,R4)                  Point to the number.
         LA    R3,5(,R3)
         BAL   R7,NUMBRGET                Extract the number.
         MVC   CHCOPY(12),CHARNUM         Display value
         MVC   BICOPY(4),BINVALUE         Binary  value
         TM    NUMCFLG,X'01'              INVALID?
         BO    HNZCOPY                    DON'T PACK IF INVALID !!
         ZAP   PKCOPY,PACKNUM             Packed  value
HNZCOPY  DS    0H
         MVC   OUTLINE,OUTLINE-1
         MVC   OUTLINET(7),=C'MAKE=  '
         MVC   OUTLINE+20(8),=C'Binary: '
         HEX   OUTLINE+29,4,BICOPY
         MVC   OUTLINE+45(8),=C'Decimal:'
         MVC   OUTLINE+55(12),CHCOPY
         TM    NUMCFLG,X'01'
         BZ    HCOPYGD
         MVC   OUTLINE+68(15),=C'Invalid Numeric'
HCOPYGD  DS    0H
         TM    NUMCFLG,X'02'
         BZ    HCOPYGD1
         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'
HCOPYGD1 DS    0H
         PUT   SYSPRINT,OUTLINE
         B     SYINLOOP                   Look for next card.
SYSINEND DS    0H                         Print a blank line.
         MVC   OUTLINE,OUTLINE-1
*        PUT   SYSPRINT,OUTLINE
*
* ----- >
         CLOSE (SYSIN)
         LM    R3,R4,SAVE34
SYSINENX DS    0H
         MVC   OUTLINE,OUTLINE-1       Print a blank line.
         PUT   SYSPRINT,OUTLINE
         L     R7,SAVER7SY
         BR    R7
*------------------------  Constants needed for this routine -----*
SAVE34   DS    2F                Save work registers for routine.
SAVER7SY DS    F                 Save BAL register.
INSYSIN  DC    CL80' '           Buffer for SYSIN card image.
WRKSYSIN DC    CL80' '           Buffer to uppercase SYSIN image.
         DC    X'40'
BLNKLINE DC    CL80' '           Place to supply blanks for pgm.
CHCOPY   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT
BICOPY   DS    F                 FULLWORD BINARY NUMBER
PKCOPY   DS    PL8               Packed Decimal records to copy.
CHSKIP   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT
BISKIP   DS    F                 FULLWORD BINARY NUMBER
PKSKIP   DS    PL8               Packed Decimal records to skip.
*-----------------------------------------------------------------*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Routine to get the numeric values from the SYSIN keywords.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*-----------------------------------------------------------------*
NUMBRGET DS    0H                   Initialize for each SYSIN card.
         ST    R7,SAVER7NG          Save BAL register.
         ST    R4,SAVER4A           Save address of number in original
         ST    R3,SAVER3A           Save address of number in copy
         NI    NUMCFLG,X'FF'-X'07'  Turn off "not numeric" flag.
         MVC   CHARNUM(12),BLNKLINE   Initialize character field
         XC    BINVALUE,BINVALUE      Clear binary value
         LA    R6,12                Limit the search to 12 numbers.
* ----------------------------------------------------------------- *
*    Upon entry, R4 points to "number" in original.
*    Upon entry, R3 points to "number" in copy.
* ----------------------------------------------------------------- *
         CLI   0(R4),C' '        Is the first number value blank?
         BE    NUMBRCLG          Yes. Ignore the entire card.
* --
* ----------------------------------------------------------------- *
*    At this point, we are looking at the first character after     *
*     the particular keyword, and we want to test it and extract    *
*     its value.                                                    *
* ----------------------------------------------------------------- *
         CLI   0(R4),X'F0'       Smaller than character 0?
         BL    NUMBRNVL          Yes. Mark as invalid.
         CLI   0(R4),X'F9'       Bigger than 9?
         BH    NUMBRNVL          Yes. Mark as invalid.
         B     NUMBRVLD          Didn't fail, consider the number valid
*                   Remember that R4 is start address for "number".
NUMBRNVL DS    0H                Mark the character as invalid number.
         OI    NUMCFLG,X'01'     Set "invalid flag" for this number.
         OI    INVNFLG,X'01'     Show there's an invalid number coded.
         MVI   0(R4),C'*'        Mark invalid digit in the report.
NUMBRVLD DS    0H
* ----------------------------------------------------------------- *
NUMBRNUM DS    0H                Loop to extract the number.
         LA    R4,1(,R4)         Bump R4 to point to next character.
         C     R4,INSYSIN+71     End of card?
         BH    NUMBRGNM          Yes, Get number.
         CLI   0(R4),C' '        Blank here?
         BE    NUMBRGNM          Yes, Get number.
** ----- >>   Validity Check - below
* --
         CLI   0(R4),X'F0'       Smaller than C'0'?
         BL    NUMBINVL          Yes. Mark as invalid.
         CLI   0(R4),X'F9'       Bigger than C'9'?
         BH    NUMBINVL          Yes. Mark as invalid.
         B     NUMBVALD          None of above, don't mark invalid.
NUMBINVL DS    0H                Mark the character as invalid number.
         OI    NUMCFLG,X'01'     Set "invalid flag" for this number.
         OI    INVNFLG,X'01'     Show there's an invalid number coded.
         MVI   0(R4),C'*'        Mark invalid digit in the report.
NUMBVALD DS    0H
** ----- >>   Validity Check - above
         BCT   R6,NUMBRNUM       Step up one place.
         OI    INVNFLG,X'02'     Show we've coded more than 12 numbers
* ----------------------------------------------------------------- *
*  This is a serious error, and we abort the COPY with a message.   *
* ----------------------------------------------------------------- *
NUMBRGNM DS    0H
         L     R2,SAVER4A        Load R2 with address of number start
         SR    R4,R2             How big is the number?
         BCTR  R4,0              Lower by one for EXECUTE.
         TM    NUMCFLG,X'01'     Was any digit of the number invalid?
         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.
         XC    PACKWORK,PACKWORK   Clear the work area.
         EX    R4,PACKIT         Pack the number into work area.
         MVC   PACKSAVE,PACKWORK
         MVC   OUTLINE,OUTLINE-1
         HEX   OUTLINE+20,8,PACKWORK     Test display
*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.
         ZAP   PACKNUM,PACKWORK
         MVC   OUTLINE,OUTLINE-1
         HEX   OUTLINE+20,8,PACKNUM      Test display
*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.
NUMBRNPK DS    0H
         MVC   CHARNUM(12),BLNKLINE   Clear the display area.
         EX    R4,MVNUMBER       Move the display value to display.
         TM    NUMCFLG,X'01'     Was any digit of the number invalid?
         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.
* ----------------------------------------------------------------- *
*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *
* ----------------------------------------------------------------- *
         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number
         BH    NUMBRCLY          CVB has upper limit of X'7FFFFFFF'
         CVB   R0,PACKWORK       Convert the packed version to binary.
         ST    R0,BINVALUE       Store the binary value for later use.
         B     NUMBRCLG
NUMBRCLY DS    0H
         OI    NUMCFLG,X'02'     CVB limit exceeded. Flag it.
NUMBRCLG DS    0H                End of routine to extract numbers.
         L     R3,SAVER3A
         L     R7,SAVER7NG       Restore BAL register.
         BR    R7
* ----------------------------------------------------------------- *
HEX      DS    0H                    Hex Number Display Routine.
         ST    R7,SAV7HEX
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         L     R7,SAV7HEX
         BR    R7                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
* ----------------------------------------------------------------- *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV7HEX  DC    F'0'
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>
MVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>
SAVER7NG DS    F
SAVER3A  DS    F
SAVER4A  DS    F
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PACKWORK DC    2D'0'             PACK WORK AREA (expanded to 2D)
PACKSAVE DC    2D'0'             PACK SAVE AREA (expanded to 2D)
CHARNUM  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT
OUTRECD  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT
BINVALUE DS    F                 FULLWORD BINARY NUMBER
PACKNUM  DS    PL8               Packed number.
*
NUMCFLG  DS    X                 Error flag FOR EACH SYSIN card
*              X'01'             Error present in THIS card
*              X'02'             Number exceeds CVB limit
*
INVNFLG  DS    X                 Error present in ANY card-ABORT..
*              X'01'             Non-numeric in any card.
*              X'02'             A coded number exceeds 12 digits.
*
SKIPFLG  DC    X'00'
*                                X'01' - SKIP coded
*                                X'02' - COPY coded
         DC    CL8' '
UNPKWORK DC    CL12' '
         DC    CL8' '
* ----------------------------------------------------------------- *
* ----- CONSTANTS ------ *
EDPAT    DC    X'40202020202020202120'
EDPAT1   DC    X'F02020202020202020202120'
EDPAT2   DC    X'402020206B2020206B2020206B2020206B202120'
TWELVE0S DC    C'000000000000'
         DC    C' '
BLANKS   DC    CL133' '
OUTLINE  DS    CL133
OUTLINET EQU   OUTLINE+7
HEADER   DC    CL133'1  MANYRCDS - CREATE SEQUENTIAL RECORDS   '
         DC    CL133' '
MSG01    DC    CL133'-    RECORDS  IN =                        '
         DC    CL133' '
MSG02    DC    CL133'     RECORDS OUT =                        '
         DC    CL133' '
MSG03    DC    CL133'    RECORD LIMIT =                        '
         DC    CL133' '
INRCDS   DC    PL8'0'
OUTRCDS  DC    PL8'0'
         LTORG
*YSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,LRECL=12
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133
SYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X
               EODAD=SYSINEND
         DC    CL8' '
SAVE1402 DS    6F                 ONE MORE FOR SAFETY
AREA     DS    CL32768
         END   MANYRCDS
